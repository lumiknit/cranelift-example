// Root rule is just a singleton of the expression
// EOI is required to consume whole input.
root = { SOI ~ expr ~ EOI }

// Expr
expr = _{ calc | call | term }

// Expression enclosed in parentheses
paren = _{ "(" ~ expr ~ ")" }

// Infix operator
// This is slightly dumb, because all operator have the same precedence,
// I just use it for simplicity
calc = { term ~ infix ~ expr }

// Function call
call = { fn ~ expr }
fn = _{ fn_print }
fn_print = { "print" | "rand" }

// Term is almost same as expr, but prevent infinite recursion because of calc.
term = _{ num | paren | input }

// Operator for calculation
infix = _{ add | sub | mul | div | eq }
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
eq = { "==" }

// Number in just an integer
num = @{ ("+" | "-")? ~ ('0'..'9')+ }

// Input looks like '$0', '$1', '$2', ...
input = @{ "$" ~ input_index }
input_index = { ('0'..'9')+ }

// Other rules.
WHITESPACE = _{ " " | "\n" | "\t" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n"? }
